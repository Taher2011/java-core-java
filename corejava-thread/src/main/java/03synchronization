Synchronization : Synchronization is the process of executing multiple thread in multi-thread environment in sequential manner.
				  Synchronization is used to prevent thread interference and data inconsistency
				  When multiple threads are operating simultaneously on same java object, then there may be chance of data inconsistency. To overcome such problem synchronization is used.
				  If method or blocked is declared as synchronized then at a time only one thread is allowed to access that method or block on given object to avoid data inconsistency.
				  Then main advantage of synchronization is data inconsistency problem may resolved, but the main disadvantage is it increases waiting time of threads and creates performance
				  issues. Internally synchronization concept is implemented by using lock. 
				  Every object has unique lock. Once thread get lock it is allowed to execute any synchronized method on that object.
				  Once method execution completes automatically thread releases the lock.
				  While thread executing synchronized method on given object, the remaining threads are not allowed to execute same method or any other synchronized methods simultaneously
				  on the same object, but remaining threads are allowed to execute non-synchronized methods simultaneously.
				  
				  Conclusion :
				  If multiple threads are executing on same object, then synchronization is required.
				  If multiple threads are executing on different objects, then synchronization is not required.
				  
Class level lock : Every class in java has a unique lock, if thread wants to execute static synchronized method then thread requires class level lock. Once thread get Class level lock, then it is
				   allowed to execute any static synchronized method of that class, once method execution completes automatically it releases lock.
				   While thread executing static synchronized method, the remaining threads are not allowed to execute any static synchronized method of that class simultaneously either on same
				   object or different object. But remaining threads are allowed to execute following methods simultaneously
				   1) static methods
				   2) instance methods
				   3) synchronized instance methods.
				   

Synchronized Block : If very few lines of code required synchronization then its not recommended to declare entire methods as synchronized. We can enclose that few lines of code inside synchronized
					 block. The main advantage of synchronized block over synchronized method is ,it reduces waitng time of threads and improves performance of the system.
				  

Race Conditions : If multiple threads are operating simultaneously on same java objects, there may be chance of data inconsistency called as race condition. To overcome we can use synchronized.

Deadlock : If 2 threads are waiting for each other forever such infinite waiting is called deadlock. There are no resolution technique for deadlock, but several prevention techniques are available. 				  

Starvation : Long waiting of threads where waiting never ends called deadlock. Whereas long waiting of thread where waiting ends at certain point called starvation.
			 For example, low priority threads has to wait until completing all high priority threads, it may be long waiting but ends at certain point.
			 
Daemon Threads : The threads which are executing in the background are called Daemon threads. The main objective of daemon thread is to provide support for non-daemon thread.
				 For example : GarbageCollector, If main thread runs with low memory then jvm runs GC to destroy use-less objects.
				 By default main thread is non-daemon and for all remaining threads daemon nature is inherited from parent to child. Its not possible to change daemon nature of main thread because
				 its already started by jvm.
				 Whenever last non-daemon thread terminates automatically all daemon threads will be terminated irrespective of their positions.
				 
				 We can check daemon nature of thread by using below method
				 ======public boolean isDaemon();======
				 
				 We can change daemon nature of thread by using below method
				 ======public void setDaemon(boolean b);======
				 