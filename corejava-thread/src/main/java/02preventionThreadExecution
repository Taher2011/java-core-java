How to prevent thread execution ?
1)yield()
2)join()
3)sleep()

Thread Priorities : Every thread in java has some priorities and default is 5(for remainig threads default priority will be inherited from parent to child).
					The valid range of thread priorities is 1to 10 where 1 is min and 10 is max. Thread Scheduler uses priorities while allocating processor, thread which is having highest priority
					will get chance first.If 2 threads having same priorities then we can't expect exact execution order. If we set less than 1 or greater than 10 we will get IllegalArgumentException.
					Thread.MIN_PRIORITY = 1
					Thread.NORM_PRIORITY = 5
					Thread.MAX_PRIORITY = 10

yield() : It causes current executing thread to pause and give chance to other waiting threads of same priority. And Thread Scheduler is free to ignore call to yield(). If there is no waiting
		  thread or all thread having low priority then same thread which is yielded can continue its execution. If multiple threads are waiting having same priority or higher then which thread
		  will get chance to execute its depend upon Thread Scheduler. The thread which is yielded when it will get chance back again it depends upon Thread Scheduler.
		  ======public static void yield();======
		  
join() : If thread wants to wait until completing some other thread, then thread who wants to wait has to call join().
		 For example, if thread t1 wants to wait until completing t2, then t1 thread has to call join() on t2 thread object i.e t2.join() and t1 will go to waiting state. Once t2 completes then t1
		 can continue its execution.
		 
		 example : t1--> Venue Fixing Thread
		 		   t2--> Wedding cards printing Thread (t2 has to wait until t1 completes, hence t2 call t1.join())
		 		   t3--> Wedding cards distribution Thread (t3 has to wait until t2 completes, hence t3 call t2.join())
         
         ======public final void join() throws InterupptedException;======
         ======public final void join(long ms) throws InterupptedException;======
         ======public final void join(long ms, int ns) throws InterupptedException;======
         
         If two threads t1 an t2, 
         if t1 calls join() on t2 thread object i.e t2.join() and t1 will entered in waiting state & 
         if t2 calls join() on t1 thread object i.e t1.join() and t2 will entered in waiting state.
         then both thread will wait forever and deadlocked.
         
         If thread t1 calls join() on same thread itself i.e t1.join() then thread will wait forever and deadlocked.
         
sleep() : If thread don't want to perform any operation for a particular amount of time , then thread can call sleep().
		  ======public static void sleep(long ms) throws InterupptedException;======
		  ======public static void sleep(long ms, int ns) throws InterupptedException;======
		  
How thread can interrupt another thread ?
A thread can interrupt a sleeping thread or waiting thread by using interrupt() of Thread class.
======public void interrupt();======

A thread can interrupt another thread by calling interrupt() of Thread class.
If the target thread is not in sleeping state or waiting state, then there is no impact of interrupt call immediately. Interrupt call be waited until target thread entered into sleeping or waiting state.
If target thread entered into sleeping or waiting state, then immediately interrupt call will interrupt target thread.
If target thread never entered into sleeping or waiting state then there is no impact of interrupt call on  target thread.
