Executing several task simultaneously is the concept of multi-threading. There are 2 types of multi-tasking
a) Process Based b) Thread Based

Process Based : Executing several task simultaneously where each task is separate independent program(process)
known as Process Based Multitasking. It is best suitable at OS level.
For example, while typing a java program we can listen to audio and at the same we can download a file.

Thread Based  : Executing several task simultaneously where each task is separate independent part of same program 
known as Thread Based Multitasking and each independent part is called Thread.

Main objective of multi-tasking is to reduce response time of the system and improve performance.

Main important areas of multi-threading are web-servers, app-servers, video games and animations.

Java provides rich standard API's for multi-threading.

Thread Scheduler : It is part of JVM, when multiple threads are waiting for chance to get execute, then in which order 
the thread will get executed is decided by Thread Scheduler. We can't expect exact algorithm followed by Thread Scheduler, its varied
from JVM to JVM, hence we can't expect thread execution order and exact output.

start() : A call to start method creates a new thread i.e create new separate call stack for a thread and is responsible for the execution
of run(). If run() gets called directly without invoking start(), no new thread will be created and its just normal method call executed by
main thread. start() is responsible to register the thread within Thread scheduler and hence without executing start() there is no chance of
starting new thread. Calling start() twice will result in IllegalThreadStateException.